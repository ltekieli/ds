#!/usr/bin/python

import argparse
import json
import os
import random
import string
import urllib2

from decimal import Decimal

from ds import AuthApi
from ds import TaskApi
from ds import Response
from ds import Session

def print_tasks(tasks):
    TASK_NAME_LENGTH = 50
    for task in tasks:
        if (len(task['title']) < TASK_NAME_LENGTH):
            task_name = task['title'][0:TASK_NAME_LENGTH]
        else:
            task_name = task['title'][0:TASK_NAME_LENGTH] + "..."
        task_length = len(task_name)
        if (task_length < TASK_NAME_LENGTH):
            task_name += ' ' * (TASK_NAME_LENGTH - task_length)
        try:
            result = dict()
            result['task_name'] = task_name
            result['progress'] = Decimal(task['additional']['transfer']['size_downloaded']) / Decimal(task['size']) * 100
            result['status'] = task['status']
            result['speed'] = Decimal(task['additional']['transfer']['speed_download']) / 1000 / 1000
            print '{task_name}\t{status}\t{speed:0.2f}MB/s\t{progress:0.2f}%'.format(**result)
        except Exception as e:
            pass


def main():
    parser = argparse.ArgumentParser(
        description='Utility for listing, creating and deleting tasks in Synology Download Station',
        epilog='Utility can use environment variables: SYNO_IP, SYNO_PORT, SYNO_USER, SYNO_PASSWD instead of arguments'
    )
    parser.add_argument("-i", "--ip", nargs='?', help="Synology ip")
    parser.add_argument("-r", "--port", nargs='?', help="Synology port")
    parser.add_argument("-u", "--user", nargs='?', help="Synology username")
    parser.add_argument("-p", "--passwd", nargs='?', help="Synology user password")
    parser.add_argument("-c", "--create", nargs='+', help="Creates new download from link")
    parser.add_argument("-d", "--delete", nargs='+', help="Delets task based on its name")
    args = parser.parse_args()

    if not args.ip:
        args.ip = os.environ['SYNO_IP']

    if not args.port:
        args.port = os.environ['SYNO_PORT']

    if not args.user:
        args.user = os.environ['SYNO_USER']

    if not args.passwd:
        args.passwd = os.environ['SYNO_PASSWD']

    with Session(args.ip, args.port, args.user, args.passwd) as session:
        if args.create:
            for uri in args.create:
                if session.task_api.create(uri).success:
                    print "Torrent added succesfully"
                else:
                    print "ERROR! Torrent not added"

        if args.delete:
            for name in args.delete:
                if session.task_api.delete(name).success:
                    print "Torrent {} deleted succesfully".format(name)
                else:
                    print "ERROR! Torrent {} not deleted".format(name)

        if not args.create and not args.delete:
            data = session.task_api.list().data
            print_tasks(data["tasks"])


if __name__ == "__main__":
    main()
